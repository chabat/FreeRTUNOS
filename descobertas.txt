
Ao tentarmos diminuir a quantidade da stack pela metade, não foi possível dobrar a quantidade de tasks.
O motivo era que ela cria um TCB (Task control block).

Aparentemente dentro do arquivo fonte do freertos no arduino, a tasks.c não permite usar fopen.

O tamanho de um ponteiro no arduino é 2 bytes, já que o sistema parece ter 16bits.

Tamanho do TCB (Máximo e mínimo)

- Ponteiro para o topo da pilha da tarefa: 2 bytes

- MPU Wrapper: Provavelmente não usa, se usa: {BaseType_t xUsingStaticallyAllocatedStack; (1 byte) + xMPU_SETTINGS	xMPUSettings; (?) }

- Funções do arduino não estão disponiveis dentro do código do FreeRTOS

- Tentamos usar a header tasks.h, porém também não funcionou, não reconhecendo a estrutura TCB_t;

- Usamos a linguagem processor para tentar ler. Parece que ao terminar de escrever, permanece lá por quantas
leituras forem possíveis, causando assim um "flood" da ultima mensagem escrita.

- Percebemos que a função vTaskDelete nao tinha retorno e alteramos para retornar o tamanho do TCB_t. Com isso, ao executar a função de criar e deletar uma tarefa,
obtivemos como resposta um número e um conjunto de caracteres não identificados. O número que parece ser o tamanho do TCB_t é 41 bytes.
com isso, percebe-se que para criar uma tarefa, usa-se o tamanho da pilha definido na função de criação da tarefa mais 41.
Criando 4 tarefas com pilha de 200, foram usados 964 bytes.
Ao dividir a pilha por 2 e tentar dobrar as tarefas, teríamos utilizado 1128 bytes.
O que é estranho, pois ao compilar e dar upload para o arduino, temos como resposta que tem livre para variáveis locais 1676 bytes.

- Começamos a testar a tarefa idle, porém, ao fazer um programa que deletava sua própria tarefa após executá-la uma vez,
ela continuava executando por um período de tempo. Nossa dedução é que leva um tempo para a tarefa ser realmente deletada.

- Ao rodar o novo código, a tarefa 4 termina antes da tarefa 3. Porque??

- Descobrimos que em 100ms o arduino faz 6 ticks. Com 1000ms faz 62.

- Fizemos um código em que pegamos o tempo inicial e final da tarefa através do xTaskGetTickCount() e dividimos por quantos ticks ele dá em um segundo e multiplicamos por 1000 para saber o tempo em milisegundos.

- Com 1 tarefa o tempo em média foi de 240 a 250ms. Com 2 o resultado foi o esperado: dobrou. Porém, as tarefas param de imprimir do nada. E não é só nesse caso.
Era suposto pra aguentar até 2^(16), mas ele trava com muito menos. Estamos achando que é algum deadlock.

- Vamos comparar o tempo do xTaskGetTickCount com o millis(), um é do FreeRTOS que guarda os ticks, e o outro do arduino que guarda os milisegundos desde que o programa iniciou.

- Adicionamos constantes para debugar, mainUSE_FREERTOS_TICK_COUNT. Se ela tiver declarada usa o relógio do FreeRTOS, se não, usa o do arduino.

- O resultado da comparação é que ambos medem o tempo com similar precisão.

- Ao testar como estava o rendimento da tarefa idle, fazendo um for que iria de 0 até 10^5, ele extrapolava esse valor, mas não saía do for.

- Junto de quatro tarefas com operações brutas e medidas de tempo, a tarefa idle demora de um a dois segundos para terminar sua iteração. A tarefa idle somente medirá o tempo.

- Ao verificar o código da pilha da tarefa idle, encontramos que ela é definida pela variável tskIDLE_STACK_SIZE, que é definido por configIDLE_STACK_SIZE que é UBaseType_t 128, ou seja, 128 bytes.

ESCALONADOR:

- Ao verificarmos o código do escalonador, percebemos que caso seja especificado que a tarefa idle tenha um handle, será passado um handle para a função que cria uma tarefa, isso faz com que
seja possível recuperar esse handle através da função xTaskGetIdleTaskHandle();

- Se tiver configurado para usar timers, será chamada uma função (xTimerCreateTimerTask) responsável por garantir a criação da infraestrutura (tarefa) responsável pelo gerenciamento dos timers.

- O tamanho da pilha da tarefa de timer é definida por configTIMER_TASK_STACK_DEPTH que é definida por configMINIMAL_STACK_SIZE, que é 85 bytes.

- Ao verificar se existe algum tipo de sobreposição (polimorfismo) na função vApplication idle hook, encontramos que a tarefa chama outra função de loop e verifica se existe algo para ler na entrada serial,
ele irá lê-la, mas não entendemos se essa sobreposição de função existe ou não.

- mtCOVERAGE_TEST_MARKER(): É definido como nada. Usado para perceber quando o código não entra em um if, ao invés de somente parar por ali e seguir o código, ele cai nessa função e assim podemos ver que o programa tomou esse caminho.


TABELA DE USO DE MEMÓRIA:

Espaço que um código vazio do arduino ocupa: 9 bytes da memória RAM.
Espaço que a biblioteca do FreeRTOS ocupa: 150 bytes da memória RAM.
Espaço que a função serial.X ocupa: 175 bytes da memória RAM.
