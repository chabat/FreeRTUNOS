******************************************************************************************************************************************************
***********************************************************SESSÂO DE FUNÇÕES**************************************************************************
******************************************************************************************************************************************************

*Macros de Tracing: Permitem coleta de dados sobre o comportamento da aplicação durante a execução. Pontos chave do sistema possuem macros vazias
que podem ser redefinidas para prover funcionalidades de tracing. As macros vazias não afetam o funcionamento da aplicação.

(Arduino_FreeRTOS.h) portYIELD_WITHIN_API:
Macro que define portYIELD_WITHIN_API como portYIELD

(Arduino_FreeRTOS.h) configASSERT:
*Usada para evitar que o programa execute após essa chamada caso o valor do parâmetro seja igual a 0. Isso facilita
a depuração, pois indica o arquivo e a linha do erro.

(heap_3.c) pvPortMalloc:
-Suspende o escalonador através de uma chamada de vTaskSuspendAll
-Aloca um bloco do tamanho em bytes passado via parâmetro através de uma chamada de malloc(), atribuindo à variável de retorno
  o retorno da chamada, que é um ponteiro para o início do bloco.
-Chama a macro de tracing traceMALLOC, passando como parametro o ponteiro para inicio do bloco e tamanho do bloco em bytes
-Resume o escalonador através de uma chamda de xTaskResumeAll
-Caso configUSE_MALLOC_FAILED_HOOK estiver definida e o retorno da chamada a função malloc() seja NULL, indicando que não houve espaço
suficiente na heap para a alocação ser concluída com sucesso, é chamada a função vApplicationMallocFailedHook(). Essa função é um hook, ou
chamada de callback que se definida e configurada, será chamada se o retorno de malloc() for NULL.

(list.h) listLIST_IS_EMPTY():
*Macro para checar se uma lista está vazia, apenas vê se o número de itens é 0.

(list.h) listGET_OWNER_OF_HEAD_ENTRY():
-> Recebe como parametro a lista da qual se deseja obter o dono.

-> Macro que obtém o  do dono do primeiro elemento numa lista. Listas geralmente são ordenadas de maneira crescente
em relação aos valores dos itens.

-> Essa função retorna o membro pxOwner do primeiro item da lista. O parametro pxOwner de um item de lista é um
ponteiro para o objeto que é dono daquele item da lista. No escalonador, normalmente é um bloco de contro de tarefa (TCB).
O parametro pxOwner efetivamente cria uma ligação de ida e volta entre o item e seu dono.

*(como faz isso usando end->next->owner?)

(list.h) listTEST_LIST_ITEM_INTEGRITY():
*Macro que checa a integridade do item de lista passado como parâmetro. Faz isso comparando um valor da estrutura do item a um valor predeterminado,
pode conseguir detectar sobrescrita dos valores na memória.

(list.c) uxListRemove:
*Remove o item passado por parâmetro de sua respectiva lista (o item tem o ponteiro para sua lista).
Retorna o número de elementos que permanecem na lista.

-Obtém a lista a qual o item pertence do própio item
-Arruma os encadameantos da lista (liga os elementos anterior e próximo do item)
-mtCOVERAGE_TEST_DELAY (usado durante testes de cobertura de decisão)
-Garante que o índice da lista (pxIndex) seja deixado apontando para um item válido->
  --Caso o índice esteja apontando para o item removido, aponta para o anterior dele.
  --Caso contrário, apenas mtCOVERAGE_TEST_MARKER
-Seta o container do item (Lista ao qual pertence) como NULL
-Decrementa o número de itens da listas
-Retorna o número de itens restantes.

(list.c) vListInitialise:
*Recebe como parâmetro uma estrutura do tipo List_t e vai ajustar os ponteiros, tendo um ponteiro que marca o fim da fila (e.g. aponta para o fim dela),
irá colocar um valor muito grande no fim, para que permaneça no final, assim o fim da fila sempre ficara lá. além de colocar o proximo e anterior itens da fila apontando
para o fim (provavelmente para dizer que a lista não contém nenhum membro).

(list.c) vListInsertEnd():
*Insere um item no final da lista passada como parâmetro

-Checa a integridade da lista e do item que está sendo inserido comparando valores de sua estrutura com uma constante, através de chamadas para
listTEST_LIST_INTEGRITY() e listTEST_LIST_ITEM_INTEGRITY().
-Atribui o próximo do elemento sendo inserido como o pxIndex da fila.
-Atribui o anterior do elemento sendo inserido como o anterior do pxIndex da fila.
-mtCOVERAGE_TEST_DELAY (usado durante testes de cobertura de decisão)
-Atribui ao próximo do anterior do pxIndex e ao anterior do pxIndex o novo item
-Salva no item em qual container (lista) ele se encontra
-incrementa o número de elementos na fila

(list.h) listSET_LIST_ITEM_VALUE():
  -Vai atribuir o que está em xItemValue de pxListItem o valor xValue.

(port.c) vPortYield:
*Essa função é responsável pela troca "manual" de contexto.

(portmacro.h) portYiELD:
*Macro que define portYiELD() como vPortYield.

(queue.c) xQueueCreate()(xQueueGenericCreate):
*Na verdade é usada assim (como xQueueCreate) para que só precise receber o valor do tamanho da queue e seu comprimento,
mas na verdade ela chama a xQueueGenericCreate, dando o valor de queueQUEUE_TYPE_BASE (apenas utilizado para tracing, mas é definido como 0).

-Remove warnings do compilador caso configUSE_TRACE_FACILITY não esteja ativada, explicitando a variável ucQueueType.

-Verifica se o comprimento da fila é maior que 0 com uma chamada de configASSERT, para evitar erros.

-Se o tamanho de cada item for 0, então não vai haver uma área de armazenamento de queue (possivelmente o único interesse é acessar os metadados da fila). Define o tamanho da fila em bytes para 0.

-Caso contrário, o tamanho da fila em bytes será o comprimento da fila vezes o tamanho de cada item mais 1. Esse byte adicional serve para fazer wrap checking mais rápido (?).

-Aloca o espaço para a estrutura da fila mais o tamanho da área de armazenamento em bytes.

-Caso a alocação tenha sido bem sucedida->
  --Se o tamanho do item for 0, ele vai fazer com que o ponteiro pcHead aponte para a própria estrutura da queue, por que é um endereço garantidamente dentro da memória mapeada. O valor não pode ser NULL
  pois isso é usado para indicar que a fila é um mutex.

  --Caso contrário, fará com que pcHead aponte para o início da área de armazenamento, pulando os dados estruturais da fila.

  --Atualiza os dados estruturais da fila uxQueueLenght e uxItemSize;
  --Chama a função xQueueGenericReset para resetar o estado da fila.
  --Caso o tracing estiver ativado, atribui ao tipo da queue o valor de ucQueueType (nesse caso é um unsigned char).
  --Se estiver usando conjunto de queues, então atribui ao ponteiro de container dessa queue o valor NULL, isso quer dizer que ela não pertence a nenhum conjunto de filas.
  --Chama a macro de tracing traceQUEUE_CREATE.
-Atribui o endereço (handle) da nova queue à variável de retorna e a retorna para quem chamou a função.


(queue.c) xQueueGenericReceive():
-Verifica se a fila existe;
-Entra em um for interminável. -> Então ele vai ficar tentando pra sempre. O que quebra os fors são os returns dentro da funçao.
-Entra na região crítica;
-Se houver alguma mensagem na fila esperando ser lida ->
  --Salve a posição inicial de onde começar a ler (pcReadFrom) em pcOriginalReadPosition.
  --Copie um item para o buffer através de prvCopyDataFromQueue.
  --Se não estiver somente observando a fila ->
    --- Diminua a quantidade de mensagens esperando.
    ---Se estiver usando mutexes e a fila é um mutex ->
      ----Será incrementado a quantidade de vezes que aquele mutex foi pego através de pvTaskIncrementMutexHeldCount, além de ser atribuido a pxMutexHolder o tcb da tarefa que o pegou.
      ----Se houver alguma mensagem esperando para escrever um dado nessa fila->
        -----Coloque ele na lista de pronto e libere o uso do escalonador.
      ----Se tá só observando->
        -----Resete o ponteiro de leitura.
        -----Se a lista não está vazia e tem alguma tarefa esperando para ler da fila->
          ------Coloque essa tarefa na lista de pronto e libere o uso do escalonador.

-Caso contrário->
  --Se o tempo de espera for 0 ->
    ---Saia de região crítica e retorne um erro dizendo que a queue está vazia.
  --Caso contrário, mas é a primeira vez que está verificando ->
    ---Defina o xEntryTimeSet e defina o timeout;
-Saia da região crítica.
-Suspenda o escalonador e bloqueie a fila, para garantir a atomicidade.
-Se o timeout ainda não expirou ->
  --Se a fila não está vazia ->
    ---Se é um mutex e a fila é do tipo mutex ->
      ----Então irá acontecer a herdagem de prioridade, através de vTaskPriorityInherit e vai sair da região crítica.
    ---Coloque o tcb na lista de eventos de mensagens que estão esperando para ler da fila.
    ---Desbloqueie e fila.
    ---Resuma o escalonador.
  --Caso contrário ->
    ---Tente de novo.
-Se o timeout expirou ->
  --Retorna erro que a fila está vazia.

(queue.c) prvCopyDataFromQueue():
-Se a fila tem ao menos um dado ->
  --Faça ele receber o próximo item, aumentando em uxItemSize o lugar para ele ler.
  --Se ultrapassar o fim da fila, mude o aponteiramento para ele ler do começo da área de armazenamento.
  --Copie um item para o buffer.

(queue.c) xQueueGive():
-Entra na região crítica.
-Se a quantidade de mensagens na fila forem menor que o tamanho dela, então é possível colocá-la lá ->
  --Se o tipo da fila é um mutex, então ele vai chamar a função xTaskPriorityDisinherit para o pxMutexHolder
  e vai dar que o pxMutexHolder daquela fila é NULL.
  --Aumenta a quantidade de mensagens esperando por algum dado para chegar na fila.
  --Se houver uma tarefa esperando para ler da fila, então essa tarefa será desbloqueada.
  --Se ao tentar remover da lista de eventos retornar pdTRUE, então a tarefa tem maior prioridade, deste modo deve-se
  liberar o uso do processador imediatamente.
  --Se por algum motivo os mutexes serem devolvidos em uma ordem diferente das que foram pegos, a tarefa vai ser liberada do escalonador
  --Saia da região crítica
  --Retorne pdPASS
-Se a fila estiver cheia ->
  --Se não houver a possibilidade de esperar, então ela vai sair da região crítica e retornar errQUEUE_FULL;
  --Se houver, então será setado um timeout para a tarefa.
--Sai da região crítica.
--Suspende o escalonador.
--Bloqueia a fila.
-Se o timeout ainda não estourou ->
  --Se a fila está cheia ->
    ---Coloca ela na lista de eventos xTasksWaitingToSend. <- Pq assim a tarefa bloqueia.
    ---Desbloqueia a fila e resuma o escalonador.
  -Se não ->
    --Desbloqueia a fila e resuma o escalonador.
-Se estourou ->
  --Desbloqueia a fila, resuma o escalonador e retorne erro.

(queue.c) xQueueGenericReset:
-Vai fazer um ponteiro de queue_t apontar para o ponteiro de xQueue.
-Verifica se o ponteiro não é nulo.
-Entra na região crítica
-Altera o rabo da fila para a primeira posição não utilizada da fila.
-Atribui 0 para as mensagens esperando.
-Diz que é pra começar a ler da cauda e escrever pela cabeça
-Define que a quantidade de itens que foram lidos/removidos são -1, significando que a queue não está bloqueada.
-Se xNewQueue estiver pdFalse, quer dizer que ele não está reiniciando a fila pela primeira vez, então podem existir tarefas bloqueadas esperando para ler/escrever da fila.
  --Elas se manterão bloqueadas, mas se possuem tarefas bloqueadas esperando para escrever na fila, então uma deve ser escolhida para sair do estado de bloqueado, uma vez que será
  possível escrever nela.(portmacro.h)
-Ele chama listLIST_IS_EMPTY() para ver se a lista de mensagens esperando para escrever está vazia, se não está vazia ela tenta remover essa tarefa da lista (para a lista de pronto) que pertence através de xTaskRemoveFromEventList();
-Se a tarefa removida da lista tem maior prioridade, então é necessário que a tarefa que está agora ceda o processador para a nova tarefa. Ela faz isso liberando o processador, onde o escalonador escalonará a nova tarefa.
-Se xNewQueue estiver pdTrue, então é necessário criar as listas de tarefas que estão esperando para escrever e ler dessa fila.
-Saia da região crítica.
-Retorna pdPASS avisando que foi possível realizar tudo o que tinha para fazer.

(semphr.h) xSemaphoreTake():
  Na verdade é uma definição pra xQueueGenericReceive que recebe um QueueHandle_t do semaforo, null, o tempo de bloqueio e pdFALSE;

(semphr.c) xSemaphoreCreateMutex():
-Na verdade é somente uma definição, a função real é xQueueCreateMutex(queueQUEUE_TYPE_MUTEX)
-Cria uma nova fila e atribui a um ponteiro.
-Se foi possível criar a queue, ele irá atribuil NULL para pcTail, o que indica que nenhuma tarefa
pegou aquele mutex.
-Dirá que a fila é um mutex, atribuindo a pcHead NULL.
-Coloca NULL em pcWriteTo e pcReadFrom, pois não terá nenhum dado nessas variáveis.
-Como cada mutex tem um tamanho de um e nenhum dado é copiado a ele, as variáveis uxMessagesWaiting
e uxItemSize recebem o valor 0 e uxLength recebe valor 1.
-Coloca as filas como desbloqueadas.
-Inicializa as listas de eventos com o valor correto através de vListInitialise (xTasksWaitingToSend e xTasksWaitingToReceive).
-Inicializa o semaforo com um item lá, dizendo que nenhuma tarefa pegou o semáforo, através da função xQueueGenericSend.
-Retorna o handle da queue.

(semphr.c) xSemaphoreTake():
-Na verdade é uma chamada de xQueueGerenicReceive, passando como parametros o handle do semaforo e o tempo maximo a esperar.

(Tasks.c) VtaskStartScheduler():
-Cria a tarefa idle guardando ou não o valor dela, de acordo com a constante INCLUDE_xTaskGetIdleHandle.
-Caso o recurso de timers esteja ativado (configUSE_TIMERS) e a tarefa idle tenha sido criada com sucesso, cria a tarefa de timers.

-Desabilita as interrupções com uma chamada de portDISABLE_INTERRUPTS. Isso é feito para garantir que um tick não ocorra antes ou durante
a chamada a xPortStartScheduler (inicialização do escalonador). As pilhas das tarefas criadas contém uma palavra de status com as interrupções ligadas, então elas vão ser re-habilitadas
automaticamente quando a primeira tarefa começar a rodar.

-Caso o uso da biblioteca NewLib esteja habilitado (configUSE_NEWLIB_REENTRANT), muda o aponteiramento da variável _impure_ptr para que ela aponte para a estrutura _reent específica
da primeira tarefa a ser executada.

-Seta o tempo de desbloqueio da próxima tarefa (xNextTaskUnblockTime) para portMAX_DELAY.

-Atualiza o status do escalonador como executando, atribuindo pdTRUE à variável xSchedulerRunning.

-Zera o contador de ticks (xTickCount)

-Caso esteja definida a constante configGENERATE_RUN_TIME_STATS, a macro portCONFIGURE_TIMER_FOR_RUN_TIME_STATS deve ser definida para configurar o timer/contador usado para gerar
o contador base de tempo de execução.

-Chama a função xPortStartScheduler, para inicializar o escalonador, a função não deve passar desse ponto, uma vez que se o escalonador está executando, a xPortStartScheduler não retornará

-Caso o kernel não tenha sido iniciado corretamente por que ou a tarefa de timers ou a tarefa idle não puderam ser criadas, há uma chamada para configASSERT.

(tasks.c) xTaskPriorityDisinherit():
-Vai decrementar a quantidade de mutexes que o tcb atual segura.
-Se a prioridade dele mudou, então ele vai devolver a prioridade daquele tcb para a sua prioridade original,
removendo ele da lista de estado a qual ele pertence e resetando a prioridade dele através de taskRESET_READY_PRIOTIRY.
-Atribua a prioridade base daquela tarefa.
-Coloque ele de novo na lista de eventos, agora com sua prioridade base através de listSET_LIST_ITEM_VALUE.
-Adicione ele à lista de prontos.
-Retorne pdTRUE.

(tasks.c)	vTaskPriorityInherit():
-Se o mutex atual não for nulo e a prioridade do TCB atual é maior que a do TCB que possui o mutex ->
  --Se a sua prioridade não estiver sendo usada para alguma outra coisa (??), altere ela para a prioridade da tarefa atual.
  --Se o tcb tá na lista de pronto ->
    ---Então ele deve ser movido para a nova lista de maior prioridade.
  --Se não ->
    ---Somente herde a prioridade.

(tasks.c) pvTaskIncrementMutexHeldCount():
-Basicamente verifica se o tcb atual não é nulo, pois pode ser que a função foi chamada antes de alguma tarefa ser criada.
Se não for, então incrementará a quantidade de vezes que ele foi pego/talvez seja a quantidade de mutexes que o tcb pegou.
-Retorna o tcb atual, isso faz com que o pxMutexHolder(pcTail) caso seja a primeira vez já tenha qual é o TCB
que está segurando aquele mutex.

(tasks.c) xTaskCheckForTimeOut():
-Se existe suspensão de tarefa e ticks to wait for igual a portMAX_DELAY ->
  --Retorne pdFALSE.
-Se o contador de overflows é diferente e a quantidade de ticks é maior que a salva na variável ->
  --Então o tempo já deu overflow e passou, portanto deve-se retornar pdTRUE.
-Se o tempo ainda não estourou ->
  --Calcula o tempo restante e atualiza pxTimeOut.
  --Retorne pdFALSE.
-Retorne pdTRUE.

(tasks.c) XtaskCreate(xTaskGenericCreate):
(Definida como XTaskGenericCreate em tasks.h (Os 6 primeiros argumentos são os mesmos da xTaskCreate, os outros dois são o ponteiro para o
buffer da pilha e o ponteiro para região de memória (mais de uma?), esses dois ultimos parametros são passados como NULL)

- Utiliza uma chamada de configASSERT() para verificar se o endereço da função da tarefa é válida.

(CHECAR) - Utiliza uma chamada de configASSERT() para verificar se a prioridade da tarefa a ser criada é menor que a maior prioridade possível.
É usado um bitwise AND com a constante do bit de privilégio negada para remover o bit de privilégio durante a comparação.

-Aloca a memória necessária pelo TCB e pela pilha da nova tarefa com uma chamada à prvAllocateTCBAndStack(), checando se as alocações foram
bem sucedidas. Passa como argumentos para a função a profundidade da pilha e o ponteiro para o buffer da pilha (StackType_t * const puxStackBuffer)
que inicialmente é NULL, no caso de uma chamada a xTaskCreate.

-Caso a proteção de memória estivesse ativada (portUSING_MPU_WRAPPERS == 1), aconteceriam checagens para ver se a função deve rodar em modo
previlegiado e chacagens para ver se a função proveu a propria pilha ou se ela foi alocada dinamicamente. No ultimo caso, é necessario fazer
a liberação de memoria caso a função for terminada.

-Calcula o topo do endereço da pilha. Isso depende se a pilha cresce dos endereços altos ou baixos da memória.

-Configura o TCB recém alocado com o estado inicial da tarefa com uma chamada à função
prvInitialiseTCBVariables.

-Inicializa a pilha do TCB para parecer com que a tarefa já estivesse rodando, mas tivesse sido interrompida
pelo escalonador (com uma chamada de pxPortInitialiseStack). O endereço de retorno é setado para o início da função da tarefa. Uma vez que a pilha tenha
sido inicializada a variável de topo da pilha é atualizada.

-Caso tenha sido passado um endereço de variável para armazenar o handle, ele é atribuído a essa variável.

-Entra numa região crítica para garantir que interrupções não acessem as listas de tarefa enquanto elas estão
sendo atualizadas. Isso é feito com uma chamada de taskENTER_CRITICAL().

-Aumenta o contador de tarefas (uxCurrentNumberOfTasks).

-Se o TCB atual (pxCurrentTCB) for igual a NULL ->
  -- Como não há outra tarefa ou estão todas suspensas, essa se torna a atual (pxCurrentTCB =  pxNewTCB)
  -- Caso essa tenha sido a primeira tarefa a ser criada, é necessário inicializar as listas de tarefa, chama a função prvInitialiseTaskLists().
-Caso hajam outras tarefas rodando no momento que esta foi criada ->
  --Caso o escalonador ainda não esteja executando e essa tarefa tenha maior prioridade que as outras, faça dessa tarefa a tarefa atual.

-Incrementa um contador de tarefas criadas (uxTaskNumber++)

-Caso a funcionalidade de tracing (configUSE_TRACE_FACILITY) esteja ativada, atribui o número do contador previamente incrementado ao campo uxTCBNumber da tarefa. Somente para propósitos de tracing.

-Aqui uma macro de tracing pode ser executada se previamente definida (traceTASK_CREATE( pxNewTCB ))

-Adiciona a tarefa à lista de pronto com uma chamada à prvAddTaskToReadyList().

-Atribui pdPASS à variável de retorno, indicando que a tarefa foi criada com sucesso.

-A macro portSETUP_TCB(pxNewTCB) é chamada, ela é definida em Arduino_FreeRTOS.h como ( void )pxTCB.

-Sai da Região Crítica com uma chamada de taskEXIT_CRITICAL()

-Caso o TCB não possa ter sido alocado, atribui um erro indicando isso à variável de retorno e chama
uma macro de tracing (traceTASK_CREATE_FAILED())

-Caso o retorno da tarefa esteja marcado como pdPASS, o escalonador esteja rodando e atarefa criada tenha
maior prioridade que a sendo executada atualmente, troca de contexto com uma chamada de taskYIELD_IF_USING_PREEMPTION()

-Retorna o resultado de todo o processo a quem chamou a função

(tasks.c) prvAllocateTCBAndStack:
*Se a pilha cresce para baixo (portSTACK_GROWTH < 0), então aloca a pilha depois o TCB. Caso contrário (portSTACK_GROWTH > 0) aloca o tcb, depois a pilha.
No caso do port para Arduino Uno, a pilha cresce pra baixo. Nesse caso não faz muita diferença, uma vez que tudo é controlado pelo próprio malloc.
Porém em outras arquiteturas, isso deve ser considerado.

*De onde vem a memória depende da implementação de pvPortMalloc

-Caso a pilha cresça para cima->
  --Aloca espaço para o TCB utilizando pvPortMalloc()
  --Se alocado o TCB com sucesso, aloca o espaço para a pilha da tarefa utilizando pvPortMallocAligned(), armazenando no TCB o endereço para a base da pilha.
    ---Caso não seja possível alocar a pilha, libera o espaço anteriormente alocado para o TCB e o seta como NULL

-Caso a pilha cresça para baixo->
  -Aloca o espaço para a pilha da tarefa utilizando pvPortMallocAligned()
  -Se alocada a pilha com sucesso, aloca espaço para o TCB utilizando pvPortMalloc()
  -Caso o TCB tenha sido alocado com sucesso, armazena o ponteiro para o inicio da pilha no TCB, do contrário, libera o espaço alocado para a pilha.

-Caso algumas destas constantes esteja habilitada -> configCHECK_FOR_STACK_OVERFLOW, configUSE_TRACE_FACILITY, INCLUDE_uxTaskGetStackHighWaterMark
  --Usa uma chamada de memset para setar a pilha da tarefa com um valor definido por tskSTACK_FILL_BYTE. É usado para checar a "marca d'água" da tarefa, para fins de tracing/debugging.

-Caso alguma alocação falhe, o retorno da tarefa será NULL, e os espaços que foram alocados anterioremente serão liberados.

(tasks.c) prvInitialiseTCBVariables:
-Copia o nome da tarefa passado como parâmetro no campo pcTaskName do TCB, tomando cuidado para não copiar todos os configMAX_TASK_NAME_LEN caracteres, no caso do nome ser menor que o valor da constante.
  Isso é feito para caso a memória depois da string não seja acessível, o que é extremamente improvável.

-Garante que o nome foi terminado com \0, no caso dele ser maior ou igual a configMAX_TASK_NAME_LEN.

-Remove o bit de previlegio do valor da prioridade da tarefa, caso presente, pois o valor é usado como indice de um array.

-Atribui a prioridade à variável uxPriority do TCB.

-Caso o uso de mutexes esteja habilitado, inicia as variáveis do TCB uxBasePriority como uxPriority e uxMutexesHeld como 0.

-Inicializa os itens de lista xGenericListItem e xEventListItem com chamadas à função vListInitialiseItem. Ambos são marcados como não fazendo parte de uma lista.

-Seta o próprio TCB como dono dos itens xGenericListItem e xEventListItem através da macro listSET_LIST_ITEM_OWNER(). Isso acontece para que possamos voltar ao TCB de um item generico numa lista.

-Seta o valor do item de lista xEventListItem para o máximo de prioridades menos a prioridade dele através da macro listSET_LIST_ITEM_VALUE. As listas de eventos sempre são ordenadas por prioridade (Aparentemente em ordem crescente).

-Caso portCRITICAL_NESTING_IN_TCB esteja ativada, inicializa o valor de uxCriticalNesting como 0.

-Caso configUSE_APPLICATION_TASK_TAG esteja ativada, inicializa o valor de pxTaskTag como NULL.

-Caso configGENERATE_RUN_TIME_STATS esteja ativada, inicializa o valor de ulRunTimeCounter como 0.

-Caso portUSING_MPU_WRAPPERS, chama vPortStoreTaskMPUSettings provavelmente para armazenar as configurações de MPU. Essa função não está definida no port para Arduino Uno.
  --Caso contrário, faz um casting pra void de xRegions e usStackDepth (Para evitar warnings?).

-Caso configNUM_THREAD_LOCAL_STORAGE_POINTERS esteja habilitada, inicializa todos os ponteiros de pvThreadLocalStoragePointers como NULL.

-Caso configUSE_TASK_NOTIFICATIONS esteja habilitada, inicializa o valor de ulNotifiedValue como 0 e eNotifyState como eNotWaitingNotification.

-Caso configUSE_NEWLIB_REENTRANT esteja habilitada, chama _REENT_INIT_PTR(&(pxTCB->xNewLib_reent)) para inicializar a estrutura NewLib reent dessa tarefa.



(tasks.c) vTaskSuspendAll:
-Incrementa um contador chamado ++uxSchedulerSuspended, o que indica que o escalonador foi suspenso. Isso não desabilita as interrupções,
trocas de contexto não ocorrem enquanto o escalonador estiver suspenso. Ticks ficarão pendentes até uma chamada de xTaskResumeAll.
Explicação da atomicidade -> http://goo.gl/wu4acr

(tasks.c) xTaskResumeAll:
-Garante através de uma chamada de configASSERT (passando como parâmetro uxSchedulerSuspended) que a chamada para xTaskResumeAll
tenha uma chamada anterior de vTaskSuspendAll correspondente.

    *É possível que enquanto o escalonador estava suspenso, uma tarefa tenha sido removida de uma lista de eventos por causa de um ISR (Interruption service routine).
    Se for o caso, esta tarefa foi adicionada a xPendingReadyList. Assim que o escalonador é resumido, é seguro mover todas as tarefas dessa lista para suas listas
    de "pronta" correspondentes.

-Desabilita interrupções através de uma chamada de taskENTER_CRITICAL
-Decrementa o valor de uxSchedulerSuspended, indicando que o escalonador foi resumido
-Garante que o escalanonador não está mais suspenso e que existam tarefas, caso contrário, usa mtCOVERAGE_TEST_MARKER().

-Enquanto houverem tarefas na lista de tarefas pendentes (xPendingReadyList) (Checa com listLIST_IS_EMPTY()) ->
  --Pega o endereço do TCB da tarefa com listGET_OWNER_OF_HEAD_ENTRY()
  --Remove o xEventListItem e o xGenericListItem do TCB de suas respectivas listas com uxListRemove()
  --Adiciona a tarefa a lista de pronto com prvAddTaskToReadyList();
  --Se a tarefa movida para pronto tem prioridade(pxTCB->uxPriority) maior que a tarefa atual(pxCurrentTCB->uxPriority), então uma troca de contexto deve
  ser realizada (xYieldPending = pdTRUE)

*Se algum tick ocorreu enquanto o escalonador estava suspenso, então eles devem ser processados agora. Isso garante que não ocorram erros com o contador
de ticks, e que quaisquer tarefas atrasadas sejam resumidas no tempo correto.

-Se há ticks pendentes, enquanto houverem ticks pendentes ->
  --Chama a função xTaskIncrementTick() para incrementar o contador de ticks e ver se o novo valor vai causar o desbloqueio de alguma tarefa.
  --Caso o retorno da chamda de xTaskIncrementTick() não for falso, será necessário uma troca de contexto, portanto xYieldPending = pdTRUE.
  --Decrementa o número de ticks pendentes

-Se há troca de contexto pendente ->
  --Caso configUSE_PREEMPTION seja diferente de 0, seta o valor de xAlreadyYielded para pdTRUE, indicando que vai haver troca de contexto
  --Caso a preempção esteja ativada, troca de contexto com uma chamada de taskYIELD_IF_USING_PREEMPTION

-Habilita novamente as interrupções através de uma chamada de taskEXIT_CRITICAL()


(tasks.c) taskYIELD_IF_USING_PREEMPTION:
-Caso configUSE_PREEMPTION seja 0, é definida como uma macro vazia.
-Caso contrário, é definida como portYIELD_WITHIN_API

*Isso é feito por que caso o escalonador cooperativo esteja sendo usado então uma troca de contexto não deve ser realizada
apenas por que uma tarefa de maior prioridade foi acordada.

(tasks.c) prvAddTaskToReadyList():
*Macro para adicionar a tarefa do TCB passado como parâmetro no fim da lista de pronto apropriada.

-Macro de tracing traceMOVED_TASK_TO_READY_STATE
-Verifica e possivelmente atualiza a prioridade da maior tarefa pronta com uma chamada para taskRECORD_READY_PRIORITY
-Adiciona o TCB da tarefa a fila de tarefas prontas com uma chamada de vListInsertEnd()

(tasks.c) taskRECORD_READY_PRIORITY():
*Macro para atualizar a variável uxTopReadyPriority, que guarda a prioridade da tarefa pronta com maior prioridade.

-Se a a prioridade da tarefa passada como parâmetro for maior que a guardada em uxTopReadyPriority, atualiza uxTopReadyPriority
para a prioridade passada como parametro.

(task.h) taskENTER_CRITICAL:
-Entra na região crítica. Definida como (portmacro.h) portENTER_CRITICAL(), que nada mais é que um código em assembly para evitar interrupções (sejam elas globais ou interrupções abaixo de uma certa prioridade), se a funcionalidade configMAX_SYSCALL_INTERRUPT_PRIORITY não estiver sendo usada, então serão desabilitadas as interrupções globalmente.

(tasks.c) xTaskRemoveFromEventList():
-Retire a tarefa de maior prioridade da lista de eventos esperando para escrever na fila e como ele pode escrever agora nessa fila, então
o seu identificador de tcb será movido da lista de bloqueados para a lista de pronto. Assim como a lista de bloqueados, a lista de eventos também le ordenada por ordem de prioridades.
-Tenta atribuir listGET_OWNER_OF_HEAD_ENTRY() para pegar o primeiro membro da lista de eventos na qual está o TCB.
-Verifica se ele conseguiu atribuir.
-Chama uxListRemove() para a lista a qual o tcb atribuido pertence, para tirar o tcb dessa lista, caso o escalonador não esteja suspenso.
-Se ele estiver suspenso, então chama uma funcão que coloca o TCB na lista de prontos. Caso contrário, o coloca em uma lista de tarefas que estão prontas para irem para o estado de pronto.
-Se o TCB atual, removido da lista em que estava para a lista de pronto tem maior prioridade que o tcb correspondendo a tarefa, então uma troca de contexto deve ocorrer. Assim
  retorna xReturn como true (que significa que a tarefa tem maior prioridade) e xYieldPending como true (significando que deve ocorrer uma troca de contexto).
-Tem algo sobre usar tickless idle, entretanto não entendi direito.

(timers.c) prvCheckForValidListAndQueue:
* Verifica se a lista dos timers ativos que são referenciados, junto da fila usada para se comunicar com os timers de
software foram inicializados. Se não estiverem, cria e inicializa tudo.
-Entra na região crítica.
-Se a fila do timer ainda não foi inicializada/criada, crie duas listas de timer e diga que essas listas são as listas atuais, depois crie a fila do timer.
-Chama vListInitialise(); para fazer os apontamentos e todo o resto necessário para iniciar as listas do timer.
-Chama xQueueCreate(); para criar a fila do timer, com suas estruturas.
-Se o tamanho do registro das filas (configQUEUE_REGISTRY_SIZE) for maior que 0, então a fila atual será adicionada as filas já existentes.
-configQUEUE_REGISTRY_SIZE{ Usado para melhor visualização na hora de debugar. Permite que a fila tenha um nome e contém a informação necessária para o debugger encontrar cada fila e semáforo registrado.

(timers.c) xTimerCreateTimerTask:
- prvCheckForValidListAndQueue(){ Entra na região crítica e verifica se a queue já foi inicializada, em caso negativo, inicializa as listas de timer e cria a fila do timer.
- Se a fila foi inicializada e INCLUDE_xTimerGetTimerDaemonTaskHandle é definido como 1, então a função de criar a tarefa daemon dos timers salvará o handle dela. Caso contrário, criará a fila sem salvá-lo.
- Retorna pdPASS se conseguiu criar a tarefa e pdFAIL caso contrário.
