List_t{
  listFIRST_INTEGRITY_CHECK_VALUE:{
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES: Existe uma definição dela, que é
    usada para fazer uma verificação básica de corrupção de dados, que caso ela
    não esteja definida, será definida como 0.
  } Setado para um valor conhecido se a definição acima é 1.
  configLIST_VOLATILE{
    Se não tá definido, defina. Isso serve para evitar que o compilador remova trechos de cógido onde poderia dar erro no escalonador.
    Usado para evitar a otimização onde essa variável é usada.
  }uxNumberOfItems: quantos itens tem na fila.

}

(Tasks.c) VtaskStartScheduler{
   Cria a tarefa idle guardando ou não o valor dela, de acordo com a constante INCLUDE_xTaskGetIdleHandle.
   xTaskCreate();

}

(tasks.c) XtaskCreate{ Definida como XtaskGenericCreate,
   ConfigAssert():{ O primeiro irá verificar se o ponteiro não é nulo. O segundo provavelmente é para verificar
   se a prioridade da tarefa a ser criada é menor que a maior prioridade possível. É usado um bitwise and com a
   constante do bit de privilégio negada para remover o bit de privilégio durante a comparação.
   }
   prvAllocateTCBAndStack():
}

(FreeRTOS.h) ConfigAssert{ Usada para evitar que o programa execute após essa chamada caso o valor do parâmetro seja igual a 0. Isso facilita
a debugação, pois indica o arquivo e a linha do erro.
}

(tasks.c) prvAllocateTCBAndStack{
   Se a pilha cresce para baixo, então aloca a pilha depois o tcb. Caso contrário aloca o tcb depois a pilha.
   No nosso caso, a pilha cresce pra baixo.

}
