MUTEXES:
- Para testar os mutexes, foi usado um for que chama xSemaphoreTake para cada semáforo.

Como eu uso dois semáforos, um para começar a pegar todos os semáforos e outros N semáforos para serem pegos.
O custo em memória total(CT) será pela fórmula:

CT = CPS + CONSTS + COS + TCONSTS;

CPS = Custo do primeiro semáforo.
  63B;
COS = Custo dos outros semáforos.
  63B * MAXV;
CONSTS = Custo das constantes.
  3B -> Constantes (uint8_t);
  1B -> i do setup;
TCONSTS = Custo das variáveis dentro da tarefa.
  2B * MAXT; -> uint8_t;
  12B * MAXT; -> 3 unsigned longs;

Assim sendo, a fórmula pode ser escrita da seguindte maneira:

CT = 67 + 63*MAXV + 14*MAXT;

Isso é a memória usada sem ser considerada a memória alocada para a tarefa.

N. Mutex   | N. Tarefas | Quantidade de Memória | Tempo(useg)
01         |     1      |         144           | 16, 24, 32;
02         |     1      |         207           | 28, 32, 52;
03         |     1      |         270           | 44, 68;
04         |     1      |         333           | 56, 80;
05         |     1      |         396           | 68, 72, 92;
06         |     1      |         459           | 84, 108;
07         |     1      |         522           | 96, 120;
08         |     1      |         585           | 112, 136;
09         |     1      |         648           | 124, 148;
10         |     1      |         711           | 136, 160;
11         |     1      |         774           | 152, 176;
12         |     1      |         837           | 164, 188;
13         |     1      |         900           | 180, 200, 204;
14         |     1      |         963           | 188, 192, 212;
15         |     1      |         1026          | 204, 224;
16         |     1      |         1089          | 220, 240, 244;
17         |     1      |         1152          | 232, 256;
18         |     1      |         1215          | 244, 264, 268;
19         |     1      |         1278          | 256, 260, 284;
20         |     1      |         1341          | 268, 272, 292; <- aqui fica alternando bastante.
21         |     1      |         1404          | 284, 304, 308;
22         |     1      |         1467          | 296, 300, 320;
23         |     1      |         1530          | 308, 312, 332;
24         |     1      |         1593          | 324, 348;
25         |     1      |         1656          | ------------- <- A partir daqui não dá mais.

N. Mutex   | N. Tarefas | Quantidade de Memória | Tempo(useg)
01         |     2      |         158           | 120, 124, 248;
02         |     2      |         221           | 172 - 300; <- Desconsiderar daqui pra baixo.
03         |     2      |         284           | 1100, 1104;
04         |     2      |         347           | 1128, 1124;
05         |     2      |         410           | 1152, 1156;
06         |     2      |         473           | 99484, 99488, 99492;  <- ????
07         |     2      |         536           | 1208, 1212, 1216;
08         |     2      |         599           | 1232, 1236, 1240;
09         |     2      |         662           | ???
10         |     2      |         725           | ???
11         |     2      |         788           |
12         |     2      |         851           |
13         |     2      |         914           |
14         |     2      |         977           |
15         |     2      |         1040          |
16         |     2      |         1103          |
17         |     2      |         1166          |
18         |     2      |         1229          |
19         |     2      |         1292          |
20         |     2      |         1355          |
21         |     2      |         1418          |
22         |     2      |         1481          |
23         |     2      |         1544          |
24         |     2      |         1607          |
25         |     2      |         1670          |


- Com um mutex e um for para pegar todos os mutexes, consome 16 microsegundos.
- Dois: 28 microsegundos.
- Três: entre 40 a 44 microsegundos, algumas vezes vai pra 64.
- Quatro: média 60, as vezes 56, as vezes 64.
- Cinco: fica 68, as vezes 72 e 92.
- Seis: 80, 84, 100 e 104.
- dez: 136, 140 e 160.
- treze: 176 e 200.
- catorze: 188 a 216.
- quinze: não suporta.
Cada mutex adicional consome de 12 a 20 microssegundos para ser "pego".

Como cada mutex é uma queue_t e cada queue_t é possui 63B, então cada mutex vai
possuir 63B, o que usariam só 882 bytes.

--

Aparentemente os mutexes não bloqueiam de verdade a tarefa, ele só coloca que aquele
tcb tá usando o mutex, mas não tem aquele negócio de colocar na fila, pra que asim que
libere, o primeiro que quer, com maior prioridade usar vai conseguir. Ele somente garante
que uma tarefa apenar entrará lá.

--

Criei uma tarefa gatekeeper para não ter que usar mais mutexes, e pelo que eu vi,
com poucos mutexes apenas uma tarefa pega todos eles e solta.
Aumentando o numero de mutexes para 5, as tarefas começam a intercalar, entretanto uma
sempre pega todos os mutexes e depois os solta, aí vem a outra e faz a mesma coisa.
Aumentando mais o numero, 6 por exemplo, uma tarefa somente executa.
Provavelmente tem a ver com o fato de que com 5 mutexes

--

Agora vou testar com o aumento de tarefa, quantos mutexes serão possíveis usar, dado uma
quantidade de tarefas.
Cada tarefa teria 200 bytes de pilha.

Quantidade de variaveis globais: 69 bytes.
Quantidade de variáveis locais: 8 bytes.
Quantidade de variaveis fexíveis: 63 * (MAXV) + ??? * (MAXT) + 17;

|   Tarefas   |   Max Mutexes   |
|     1       |       17        |
|     2       |       10        |
|     3       |        3        |


--

Voltando para queue, vou ver como ela se comporta quando é um mutex.

Aparentemente uma tarefa usa muito mais que a 241 bytes, o que pode ser evidenciado no teste anterior.
Comecei a estudar timers, testando o aumento de tarefas com a quantidade de timers, o que se pode
perceber, com a tarefa de tamanho 200 -- simulando alguma funcionalidade, é:

|   Tarefas   |     Timers      |
|     1       |       37        |
|     2       |       25        |
|     3       |       14        |
|     4       |        4        |
|     5       |        0        |
